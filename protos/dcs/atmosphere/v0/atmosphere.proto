syntax = "proto3";
package dcs.atmosphere.v0;
import "dcs/common/v0/common.proto";
option csharp_namespace = "RurouniJones.Dcs.Grpc.V0.Atmosphere";
option go_package = "github.com/DCS-gRPC/go-bindings/dcs/v0/atmosphere";

// https://wiki.hoggitworld.com/view/DCS_singleton_atmosphere
service AtmosphereService {
  // https://wiki.hoggitworld.com/view/DCS_func_getWind
  rpc GetWind(GetWindRequest) returns (GetWindResponse) {}

  // https://wiki.hoggitworld.com/view/DCS_func_getWindWithTurbulence
  rpc GetWindWithTurbulence(GetWindWithTurbulenceRequest)
      returns (GetWindWithTurbulenceResponse) {}

  // https://wiki.hoggitworld.com/view/DCS_func_getWindWithTurbulence
  rpc GetTemperatureAndPressure(GetTemperatureAndPressureRequest)
      returns (GetTemperatureAndPressureResponse) {}
}

message GetWindRequest {
  // The position on the map we want the wind information for.
  // Requires lat/lon/alt fields to be populated, there are
  // no default values
  dcs.common.v0.Position position = 1;
}

message GetWindResponse {
  // The heading the wind is coming from.
  float heading = 1;
  // The strength of the wind in meters per second
  float strength = 2;
}

message GetWindWithTurbulenceRequest {
  // The position on the map we want the wind information for.
  // Requires lat/lon/alt fields to be populated, there are
  // no default values
  dcs.common.v0.Position position = 1;
}

message GetWindWithTurbulenceResponse {
  // The heading the wind is coming from.
  float heading = 1;
  // The strength of the wind in meters per second.
  float strength = 2;
}

message GetTemperatureAndPressureRequest {
  // The position on the map we want the wind information for.
  // Requires lat/lon/alt fields to be populated, there are
  // no default values
  dcs.common.v0.Position position = 1;
}

message GetTemperatureAndPressureResponse {
  // The temperature in Kelvin
  float temperature = 1;
  // The pressure in Pascals
  float pressure = 2;
}