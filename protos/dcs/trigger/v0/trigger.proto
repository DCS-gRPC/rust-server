syntax = "proto3";
package dcs.trigger.v0;
import "dcs/common/v0/common.proto";
option csharp_namespace = "RurouniJones.Dcs.Grpc.V0.Trigger";
option go_package = "github.com/DCS-gRPC/go-bindings/dcs/v0/trigger";

// https://wiki.hoggitworld.com/view/DCS_singleton_trigger
service TriggerService {
  // https://wiki.hoggitworld.com/view/DCS_func_outText
  rpc OutText(OutTextRequest) returns (OutTextResponse) {}

  // https://wiki.hoggitworld.com/view/DCS_func_outTextForCoalition
  rpc OutTextForCoalition(OutTextForCoalitionRequest)
      returns (OutTextForCoalitionResponse) {}

  // https://wiki.hoggitworld.com/view/DCS_func_outTextForGroup
  rpc OutTextForGroup(OutTextForGroupRequest)
      returns (OutTextForGroupResponse) {}

  // https://wiki.hoggitworld.com/view/DCS_func_getUserFlag
  rpc GetUserFlag(GetUserFlagRequest) returns (GetUserFlagResponse) {}

  // https://wiki.hoggitworld.com/view/DCS_func_setUserFlag
  rpc SetUserFlag(SetUserFlagRequest) returns (SetUserFlagResponse) {}

  // https://wiki.hoggitworld.com/view/DCS_func_markToAll
  rpc MarkToAll(MarkToAllRequest) returns (MarkToAllResponse) {}

  // https://wiki.hoggitworld.com/view/DCS_func_markToCoalition
  rpc MarkToCoalition(MarkToCoalitionRequest)
      returns (MarkToCoalitionResponse) {}

  // https://wiki.hoggitworld.com/view/DCS_func_markToGroup
  rpc MarkToGroup(MarkToGroupRequest) returns (MarkToGroupResponse) {}

  // https://wiki.hoggitworld.com/view/DCS_func_removeMark
  rpc RemoveMark(RemoveMarkRequest) returns (RemoveMarkResponse) {}

  // https://wiki.hoggitworld.com/view/DCS_func_explosion
  rpc Explosion(ExplosionRequest) returns (ExplosionResponse) {}

  // https://wiki.hoggitworld.com/view/DCS_func_smoke
  rpc Smoke(SmokeRequest) returns (SmokeResponse) {}

  // https://wiki.hoggitworld.com/view/DCS_func_illuminationBomb
  rpc IlluminationBomb(IlluminationBombRequest)
      returns (IlluminationBombResponse) {}

  // https://wiki.hoggitworld.com/view/DCS_func_signalFlare
  rpc SignalFlare(SignalFlareRequest) returns (SignalFlareResponse) {}
}

message OutTextRequest {
  string text = 1;
  int32 display_time = 2;
  bool clear_view = 3;
}

message OutTextResponse {
}

message OutTextForCoalitionRequest {
  string text = 1;
  int32 display_time = 2;
  bool clear_view = 3;
  dcs.common.v0.Coalition coalition = 4;
}

message OutTextForCoalitionResponse {
}

message OutTextForGroupRequest {
  string text = 1;
  int32 display_time = 2;
  bool clear_view = 3;
  uint32 group_id = 4;
}

message OutTextForGroupResponse {
}

message GetUserFlagRequest {
  string flag = 1;
}

message GetUserFlagResponse {
  uint32 value = 1;
}

message SetUserFlagRequest {
  string flag = 1;
  uint32 value = 2;
}

message SetUserFlagResponse {
}

message MarkToAllRequest {
  string text = 2;
  dcs.common.v0.Position position = 3;
  bool read_only = 4;
  string message = 5;
}

message MarkToAllResponse {
  uint32 id = 1;
}

message MarkToCoalitionRequest {
  uint32 id = 1;
  string text = 2;
  dcs.common.v0.Position position = 3;
  dcs.common.v0.Coalition coalition = 4;
  bool read_only = 5;
  string message = 6;
}

message MarkToCoalitionResponse {
  uint32 id = 1;
}

message MarkToGroupRequest {
  uint32 id = 1;
  string text = 2;
  dcs.common.v0.Position position = 3;
  uint32 group_id = 4;
  bool read_only = 5;
  string message = 6;
}

message MarkToGroupResponse {
  uint32 id = 1;
}

message RemoveMarkRequest {
  uint32 id = 1;
}

message RemoveMarkResponse {
}

message ExplosionRequest {
  dcs.common.v0.Position position = 1;
  uint32 power = 2;
}

message ExplosionResponse {
}

message SmokeRequest {
  enum SmokeColor {
    SMOKE_COLOR_UNSPECIFIED = 0;
    SMOKE_COLOR_GREEN = 1;
    SMOKE_COLOR_RED = 2;
    SMOKE_COLOR_WHITE = 3;
    SMOKE_COLOR_ORANGE = 4;
    SMOKE_COLOR_BLUE = 5;
  }

  // Altitude parameter will be ignored. Smoke always eminates from ground
  // level which will be calculated server-side
  dcs.common.v0.Position position = 1;
  SmokeColor color = 2;
}

message SmokeResponse {
}

message IlluminationBombRequest {
  // The altitude of Illumination Bombs is meters above ground. Ground level
  // will be calculated server-side
  dcs.common.v0.Position position = 1;
  uint32 power = 2;
}

message IlluminationBombResponse {
}

message SignalFlareRequest {
  enum FlareColor {
    FLARE_COLOR_UNSPECIFIED = 0;
    FLARE_COLOR_GREEN = 1;
    FLARE_COLOR_RED = 2;
    FLARE_COLOR_WHITE = 3;
    FLARE_COLOR_YELLOW = 4;
  }

  // Altitude parameter will be ignored. Signal flares always fire from
  // ground level which will be calculated server-side
  dcs.common.v0.Position position = 1;
  FlareColor color = 2;
  uint32 azimuth = 3;
}

message SignalFlareResponse {
}
