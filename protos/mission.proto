syntax = "proto3";

import "common.proto";

package dcs.mission;

// Contains the streaming APIs that streaming information out of the DCS server.
service MissionService {
	// Streams DCS game generated Events.
	// See https://wiki.hoggitworld.com/view/Category:Events
	rpc StreamEvents(StreamEventsRequest) returns (stream Event) {}

	// Streams unit updates
	// Provides similar functionality as Tacview but at a much lower update rate
	// so puts less load on the server. Suitable for things like online maps but
	// not as a Tacview replacement.
	rpc StreamUnits(StreamUnitsRequest) returns (stream UnitUpdate) {}

  // Returns the mission's in-game starttime as an ISO 8601 formatted datetime string.
  rpc GetScenarioStartTime(GetScenarioStartTimeRequest) returns (GetScenarioStartTimeResponse) {}

  // Returns the mission's in-game current time as an ISO 8601 formatted datetime string.
  rpc GetScenarioCurrentTime(GetScenarioCurrentTimeRequest) returns (GetScenarioCurrentTimeResponse) {}
}

message StreamEventsRequest {}

// The DCS Event information. Contains event information and a timestamp.
message Event {
  // Occurs when a unit fires a weapon (but no machine gun- or autocannon-based
  // weapons - those are handled by [ShootingStartEvent]).
  message ShotEvent {
    // The object that fired the weapon.
    Initiator initiator = 1;
    // The weapon that has been fired.
    Weapon weapon = 2;
  }

  // Occurs when an object is hit by a weapon.
  message HitEvent {
    // The object that fired the weapon. Not set when for example fyling an aircraft into a
    // building (building will be the target and weapon_name the name of the aircraft).
    optional Initiator initiator = 1;
    // The weapon that the target has been hit with.
    Weapon weapon = 2;
    // The object that has been hit.
    Target target = 3;
    // The weapon the target got hit by.
    string weapon_name = 4;
  }

  // Occurs when an aircraft takes off from an airbase, farp, or ship.
  message TakeoffEvent {
    // The object that took off.
    Initiator initiator = 1;
    // The airbase, farp or ship the unit took off from.
    Airbase place = 2;
  }

  // Occurs when an aircraft lands at an airbase, farp or ship.
  message LandEvent {
    // The object that landed.
    Initiator initiator = 1;
    // The airbase, farp or ship the unit landed at.
    Airbase place = 2;
  }

  // Occurs when an aircraft crashes into the ground and is completely
  // destroyed.
  message CrashEvent {
    // The object that crashed.
    Initiator initiator = 1;
  }

  // Occurs when a pilot ejects from its aircraft.
  message EjectionEvent {
    // The unit a pilot ejected from.
    Initiator initiator = 1;
    // The ejection seat.
    Target target = 3;
  }

  // Occurs when an aircraft connects with a tanker and begins taking on fuel.
  message RefuelingEvent {
    // The object that is receiving fuel.
    Initiator initiator = 1;
  }

  // Occurs when an object is completely destroyed.
  message DeadEvent {
    // The object that has been destroyed.
    Initiator initiator = 1;
  }

  // Occurs when a pilot of an aircraft is killed. Can occur either if the
  // player is alive and crashes (in this case both this and the [CrashEvent]
  // event will be fired) or if a weapon kills the pilot without completely
  // destroying the plane.
  message PilotDeadEvent {
    // The unit the pilot has died in.
    Initiator initiator = 1;
  }

  // Occurs when a ground unit captures either an airbase or a farp.
  message BaseCaptureEvent {
    // The object that captured the base.
    Initiator initiator = 1;
    // The airbase that was captured, can be a FARP or Airbase
    Airbase place = 2;
  }

  // Occurs when the mission starts.
  message MissionStartEvent {}

  // Occurs when the mission stops.
  message MissionEndEvent {}

  // Occurs when an aircraft is finished taking fuel.
  message RefuelingStopEvent {
    // he unit that was receiving fuel.
    Initiator initiator = 1;
  }

  // Occurs when any object is spawned into the mission.
  message BirthEvent {
    // The object that was spawned.
    Initiator initiator = 1;
    // The airbase, farp or ship the unit took off from.
    optional Airbase place = 2;
  }

  // Occurs e.g. when a player controlled aircraft blacks out.
  message HumanFailureEvent {
    // The unit the system failure occurred in.
    Initiator initiator = 1;
  }

  // Occurs when a system on an aircraft fails. This can be due to damage or due to random failures
  // set up in the mission editor.
  message DetailedFailureEvent {
    // The target the failure occurred for.
    Target target = 1;
  }

  // Occurs when any aircraft starts its engines.
  message EngineStartupEvent {
    // The object that starts its engines.
    Initiator initiator = 1;
    // The airbase, farp or ship the unit started their engine at.
    Airbase place = 2;
  }

  message EngineShutdownEvent {
    // Occurs when any aircraft shuts down its engines.
    Initiator initiator = 1;
    // The airbase, farp or ship the unit shut down their engine at.
    Airbase place = 2;
  }

  // Occurs when a player takes direct control of a unit.
  message PlayerEnterUnitEvent {
    // The unit the player took control of.
    Initiator initiator = 1;
  }

  // Occurs when a player relieves direct control of a unit.
  message PlayerLeaveUnitEvent {
    // The unit the player relieves control of.
    Initiator initiator = 1;
  }

  // Occurs when a unit begins firing a machine gun- or autocannon-based weapon
  // (weapons with a high rate of fire). Other weapons are handled by
  // [ShotEvent].
  message ShootingStartEvent {
    // The object that started firing.
    Initiator initiator = 1;
    // The name of the shoot weapon.
    string weapon_name = 2;
  }

  // Occurs when a unit stops firing a machine gun- or autocannon-based weapon.
  // Event will always correspond with a [ShootingStartEvent] event.
  message ShootingEndEvent {
    // The object that was shooting and has no stopped firing.
    Initiator initiator = 1;
    // The name of the shoot weapon.
    string weapon_name = 2;
  }

  // Occurs when marks get added to the mission by players or scripting
  // functions.
  message MarkAddEvent {
    // The object that added the mark.
    Initiator initiator = 1;
    oneof visibility {
      // The group the mark's visibility is restricted for.
      uint64 group_id = 2;
      // The coalition the mark's visibility is restricted for.
      Coalition coalition = 3;
    }
    // The mark's id.
    uint32 id = 4;
    // The position the mark has been added at.
    Position pos = 5;
    // The mark's label.
    string text = 6;
  }

  // Occurs when marks got changed.
  message MarkChangeEvent {
    // The object that changed the mark.
    Initiator initiator = 1;
    oneof visibility {
      // The group the mark's visibility is restricted for.
      uint64 group_id = 2;
      // The coalition the mark's visibility is restricted for.
      Coalition coalition = 3;
    }
    // The mark's id.
    uint32 id = 4;
    // The position of the changed mark.
    Position pos = 5;
    // The mark's label.
    string text = 6;
  }

  // Occurs when marks get removed.
  message MarkRemoveEvent {
    // The object that removed the mark.
    Initiator initiator = 1;
    oneof visibility {
      // The group the mark's visibility is restricted for.
      uint64 group_id = 2;
      // The coalition the mark's visibility is restricted for.
      Coalition coalition = 3;
    }
    // The mark's id.
    uint32 id = 4;
    // The position the mark has been removed from.
    Position pos = 5;
    // The mark's label.
    string text = 6;
  }

  // Occurs when an object is killed by a weapon.
  message KillEvent {
    // The object that fired the weapon.
    Initiator initiator = 1;
    // The weapon that the target has been killed with.
    Weapon weapon = 2;
    // The object that has been killed.
    Target target = 3;
    // The name of the weapon that killed the target (exists instead of weapon for weapons that
    // trigger the shooting start and end events).
    string weapon_name = 4;
  }

  // A score change (doesn't contain any useful information)
  message ScoreEvent {
  }

  // A unit got destroyed.
  message UnitLostEvent {
    // The object that got destroyed weapon.
    Initiator initiator = 1;
  }

  // A pilot detached from their ejection seat.
  message LandingAfterEjectionEvent {
    // The ejected pilot.
    Initiator initiator = 1;
    // The position the pilot landed at.
    Position place = 2;
  }

  // A pilot detached from their ejection seat.
  message DiscardChairAfterEjectionEvent {
    // The ejection seat.
    Initiator initiator = 1;
    // The pilot.
    Target target = 2;
  }

  // Fired for each payload of an aircraft spawened midair.
  message WeaponAddEvent {
    // The object that got spawned.
    Initiator initiator = 1;
    // The name of the payload.
    string weapon_name = 2;
  }

  // Occurs when an aircraft receives an LSO rating after recovering on an aircraft carrier.
  message LandingQualityMarkEvent {
    // The aircraft that received the rating.
    Initiator initiator = 1;
    // The rating.
    string comment = 2;
  }

  // The event's mission time.
  double time = 1;
  oneof event {
    ShotEvent shot = 4;
    HitEvent hit = 5;
    TakeoffEvent takeoff = 6;
    LandEvent land = 7;
    CrashEvent crash = 8;
    EjectionEvent ejection = 9;
    RefuelingEvent refueling = 10;
    DeadEvent dead = 11;
    PilotDeadEvent pilot_dead = 12;
    BaseCaptureEvent base_capture = 13;
    MissionStartEvent mission_start = 14;
    MissionEndEvent mission_end = 15;
    // @exclude 16 reserved for S_EVENT_TOOK_CONTROL
    RefuelingStopEvent refueling_stop = 17;
    BirthEvent birth = 18;
    HumanFailureEvent human_failure = 19;
    DetailedFailureEvent detailedFailure = 20;
    EngineStartupEvent engine_startup = 21;
    EngineShutdownEvent engine_shutdown = 22;
    PlayerEnterUnitEvent player_enter_unit = 23;
    PlayerLeaveUnitEvent player_leave_unit = 24;
    // @exclude 25 reserved for S_EVENT_PLAYER_COMMENT
    ShootingStartEvent shooting_start = 26;
    ShootingEndEvent shooting_end = 27;
    MarkAddEvent mark_add = 28;
    MarkChangeEvent mark_change = 29;
    MarkRemoveEvent mark_remove = 30;
    KillEvent kill = 31;
    ScoreEvent score = 32;
    UnitLostEvent unit_lost = 33;
    LandingAfterEjectionEvent landingAfterEjection = 34;
    // @exclude 35 reserved for S_EVENT_PARATROOPER_LENDING
    DiscardChairAfterEjectionEvent discardChairAfterEjection = 36;
    WeaponAddEvent weapon_add = 37;
    // @exclude 38 reserved for S_EVENT_TRIGGER_ZONE
    LandingQualityMarkEvent landing_quality_mark = 39;
    // @exclude 40 reserved for S_EVENT_BDA
  }
}

message StreamUnitsRequest {
  // The poll rate in seconds at which the gRPC server communicates with the DCS mission to retrieve
  // the latest unit positions. The lower the `poll_rate` the higher the amount of requests send to
  // to the DCS mission.
  // Default: 5
  optional uint32 poll_rate = 1;

  // The maximum backoff in seconds which the gRPC postpones polling units that haven't moved
  // recently. This is an optimization to dynamically reduce the poll rate for stationary units.
  // Set it to the same value as `poll_rate` to disable the backoff.
  // Default: 30
  optional uint32 max_backoff = 2;
}

message UnitUpdate {
  message UnitGone {
    uint32 id = 1;
    string name = 2;
  }

  oneof update {
    // The unit is either new or its position changed.
    Unit unit = 1;

    // The unit does not exist anymore.
    UnitGone gone = 2;
  }
}

message GetScenarioStartTimeRequest {}

message GetScenarioStartTimeResponse {
  string datetime = 1;
}

message GetScenarioCurrentTimeRequest {}

message GetScenarioCurrentTimeResponse {
  string datetime = 1;
}
